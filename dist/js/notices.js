// Generated by CoffeeScript 1.10.0
(function() {
  (function($) {
    var Notice, NoticeActions, NoticeTemplates;
    this.notify = function(template, type, title, message, buttonText, altAction) {
      if (type == null) {
        type = 'ok';
      }
      if (title == null) {
        title = '';
      }
      if (message == null) {
        message = '';
      }
      if (buttonText == null) {
        buttonText = '';
      }
      if (altAction == null) {
        altAction = '';
      }
      return new Notice(template, type, title, message, buttonText, altAction);
    };
    Notice = function(template, type, title, message, buttonText, altAction) {
      var extraActionsClass;
      this.type = type;
      if (typeof NoticeTemplates[template] !== 'undefined') {
        this.el = $(NoticeTemplates[template]);
        if (template === 'find') {
          this.type = 'yesno';
        } else {
          this.type = 'ok';
        }
      } else {
        if (this.type === 'ok') {
          extraActionsClass = '';
        } else if (this.type === 'yesno') {
          extraActionsClass = ' notice-actions_yesno';
        }
        this.el = $("<div class=\"notice\"> <div class=\"notice-title\">" + title + "</div> <div class=\"notice-message\">" + message + "</div> <div class=\"notice-actions" + extraActionsClass + "\">" + NoticeActions[type] + "</div> <div class=\"notice-altAction\">" + altAction + "</div> </div>");
      }
      this.el.data('Notice', this);
      this.append();
      return this.prompt();
    };
    Notice.prototype.append = function() {
      return this.el.appendTo('.notices');
    };
    Notice.prototype.remove = function() {
      return this.el.remove();
    };
    Notice.prototype.reveal = function() {
      return $('.notices').addClass('reveal');
    };
    Notice.prototype.dismiss = function() {
      var noticeObject;
      noticeObject = this;
      $('.notices').removeClass('reveal');
      return setTimeout(function() {
        return noticeObject.remove();
      }, 400);
    };
    Notice.prototype.prompt = function() {
      var noticeObject;
      noticeObject = this;
      return new Promise(function(resolve, reject) {
        var el;
        el = noticeObject.el;
        noticeObject.reveal();
        if (noticeObject.type === 'ok') {
          return $(el).on('click', '.button_ok', function() {
            noticeObject.dismiss();
            return resolve();
          });
        } else if (noticeObject.type === 'yesno') {
          $(el).on('click', '.button_yes', function() {
            noticeObject.dismiss();
            return resolve();
          });
          return $(el).on('click', '.button_no', function() {
            noticeObject.dismiss();
            return reject();
          });
        }
      });
    };
    NoticeActions = {
      'ok': "<div class=\"notice-actions-item button_ok\"> <div class=\"notice-actions-item-text\">Ok</div> </div>",
      'yesno': "<div class=\"notice-actions-item button_no\"> <div class=\"notice-actions-item-text\">No</div> </div> <div class=\"notice-actions-item button_yes\"> <div class=\"notice-actions-item-text\">Yes</div> </div>"
    };
    return NoticeTemplates = {
      'find': "<div class=\"notice\"> <div class=\"notice-title\">Find Parking</div> <div class=\"notice-message\">Are you sure you want to use <strong>1 PushPark coin</strong> to reveal the map?</div> <div class=\"notice-actions notice-actions_yesno\">" + NoticeActions.yesno + "</div> </div>",
      'share': "<div class=\"notice\"> <div class=\"notice-title\">Spot Shared Successfuly</div> <div class=\"notice-message\">Here’s a PushPark coin for you!</div> <div class=\"notice-actions notice-actions_ok\">" + NoticeActions.ok + "</div> <div class=\"notice-altAction\">Clicked by mistake? <span class=\"cancel-share\">Click here to cancel.</span></div> </div>",
      'share-first': "<div class=\"notice\"> <div class=\"notice-title\">Spot Shared Successfuly</div> <div class=\"notice-message\">Here’s a coin for you! You’ll be able to use this coins in <strong>3 Minutes</strong> from now.</div> <div class=\"notice-actions notice-actions_ok\">" + NoticeActions.ok + "</div> <div class=\"notice-altAction\">Clicked by mistake? <span class=\"cancel-share\">Click here to cancel.</span></div> </div>",
      'must-wait': "<div class=\"notice\"> <div class=\"notice-title\">Hold up!</div> <div class=\"notice-message\">To prevent abuse, we require that users wait <span class=\"share-countdown\">2:41</span> Minutes after they share a spot to reveal the map.</div> <div class=\"notice-actions notice-actions_ok\">" + NoticeActions.ok + "</div> </div>",
      'free-coins': "<div class=\"notice\"> <div class=\"notice-title\">Here are 2 Free Coins!</div> <div class=\"notice-message\">You receive 2 free coins every 24 hours if you have 1 or no coins.</div> <div class=\"notice-actions notice-actions_ok\">" + NoticeActions.ok + "</div> </div>",
      'no-coins': "<div class=\"notice\"> <div class=\"notice-title\">No Coins</div> <div class=\"notice-message\">To receive coins you can either share your parking spot or wait <span class=\"coin-countdown\">2:41 Hours</span>.</div> <div class=\"notice-actions notice-actions_ok\">" + NoticeActions.ok + "</div> </div>"
    };
  })(jQuery);

}).call(this);
