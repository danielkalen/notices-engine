// Generated by CoffeeScript 1.10.0
(function($) {
  var Notice;
  if ($('.notices').length === 0) {
    $('body').prepend('<div class="notices"></div>');
  }
  this.notify = function(arg) {
    var altAction, buttonText, ref, ref1, ref2, ref3, ref4, template, text, title, type;
    template = arg.template, type = (ref = arg.type) != null ? ref : 'ok', title = (ref1 = arg.title) != null ? ref1 : '', text = (ref2 = arg.text) != null ? ref2 : '', buttonText = (ref3 = arg.buttonText) != null ? ref3 : '', altAction = (ref4 = arg.altAction) != null ? ref4 : '';
    return new Notice({
      template: template,
      type: type,
      title: title,
      text: text,
      buttonText: buttonText,
      altAction: altAction
    });
  };
  Notice = function(arg) {
    var altAction, buttonText, extraActionsClass, template, text, title;
    template = arg.template, this.type = arg.type, title = arg.title, text = arg.text, buttonText = arg.buttonText, altAction = arg.altAction;
    if (this.type === 'yes_no') {
      this.type = 'yesno';
    }
    this.isActive = true;
    this.parentWrapper = $('.notices').last();
    extraActionsClass = this.type === 'yesno' ? ' notice-actions_yesno' : '';
    if (template) {
      this.el = $(template);
    } else {
      this.el = $("<div class='notice'> <div class='notice-title'>" + title + "</div> <div class='notice-message'>" + text + "</div> <div class='notice-actions" + extraActionsClass + "'>" + notify.noticeActionTemplates[type] + "</div> <div class='notice-altAction'>" + altAction + "</div> </div>");
    }
    this.el.data('Notice', this);
    this.append();
    return this.prompt();
  };
  Notice.prototype.append = function() {
    return this.el.appendTo(this.parentWrapper);
  };
  Notice.prototype.remove = function() {
    this.el.remove();
    return this.isActive = false;
  };
  Notice.prototype.reveal = function() {
    return setTimeout((function(_this) {
      return function() {
        return _this.parentWrapper.addClass('reveal');
      };
    })(this), 0);
  };
  Notice.prototype.dismiss = function() {
    this.parentWrapper.removeClass('reveal');
    return setTimeout((function(_this) {
      return function() {
        return _this.remove();
      };
    })(this), 400);
  };
  Notice.prototype.prompt = function() {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        _this.reveal();
        _this.el.on('click', '.notice-altAction', function() {
          _this.dismiss();
          return reject(_this);
        });
        if (_this.type === 'ok') {
          return _this.el.on('click', '.button_ok', function() {
            _this.dismiss();
            return resolve(_this);
          });
        } else if (_this.type === 'yesno') {
          _this.el.on('click', '.button_yes', function() {
            _this.dismiss();
            return resolve(_this);
          });
          return _this.el.on('click', '.button_no', function() {
            _this.dismiss();
            return reject(_this);
          });
        }
      };
    })(this));
  };
  return this.notify.noticeActionTemplates = {
    'ok': "<div class='notice-actions-item button_ok'> <div class='notice-actions-item-text'>Ok</div> </div>",
    'yesno': "<div class='notice-actions-item button_no'> <div class='notice-actions-item-text'>No</div> </div> <div class='notice-actions-item button_yes'> <div class='notice-actions-item-text'>Yes</div> </div>"
  };
})(jQuery);
